package main

import (
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

// Create default templates
func createDefaultTemplates(config *Config) {
	templatesDir := filepath.Join(config.ConfigDir, "templates")
	os.MkdirAll(templatesDir, 0755)
	
	// Create templates for common file types
	templates := map[string]string{
		"gitconfig": `[user]
    name = {{ .user }}
    email = {{ .user }}@example.com
[core]
    editor = {{ .editor }}
    autocrlf = input
[push]
    default = simple
[pull]
    rebase = false`,
		
		"zshrc": `# {{ .user }}'s {{ .shell }} configuration on {{ .hostname }}
export EDITOR="{{ .editor }}"
export PATH="$HOME/bin:$PATH"

# Aliases
alias ll="ls -la"
alias la="ls -la"
alias l="ls -l"
alias ..="cd .."
alias ...="cd ../.."

# History
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE

# Prompt
autoload -U colors && colors
PS1="%{$fg[blue]%}%n@%m%{$reset_color%}:%{$fg[green]%}%~%{$reset_color%}$ "`,

		"bashrc": `# {{ .user }}'s {{ .shell }} configuration on {{ .hostname }}
export EDITOR="{{ .editor }}"
export PATH="$HOME/bin:$PATH"

# Aliases
alias ll="ls -la"
alias la="ls -la"
alias l="ls -l"
alias ..="cd .."
alias ...="cd ../.."

# History
HISTSIZE=10000
HISTFILESIZE=20000
export HISTCONTROL=ignoredups:erasedups

# Prompt
PS1="\[\033[01;34m\]\u@\h\[\033[00m\]:\[\033[01;32m\]\w\[\033[00m\]$ "`,

		"vimrc": `" {{ .user }}'s Vim configuration on {{ .hostname }}
set nocompatible
set number
set relativenumber
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set hlsearch
set incsearch
set ignorecase
set smartcase
set ruler
set showcmd
set wildmenu
set laststatus=2

" Color scheme
syntax enable
set background=dark

" Key mappings
let mapleader = ","
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>`,

		"tmux": `# {{ .user }}'s tmux configuration on {{ .hostname }}
# Change prefix key
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Split panes
bind | split-window -h
bind - split-window -v

# Move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Enable mouse mode
set -g mouse on

# Status bar
set -g status-bg black
set -g status-fg white
set -g status-left '[#S] '
set -g status-right '#H %Y-%m-%d %H:%M'`,
	}
	
	// Create template files
	for name, content := range templates {
		for _, ext := range config.TemplateExts {
			templatePath := filepath.Join(templatesDir, name+ext)
			if _, err := os.Stat(templatePath); os.IsNotExist(err) {
				os.WriteFile(templatePath, []byte(content), 0644)
				break // Only create one template per type
			}
		}
	}
}

// Create file from template
func createFromTemplate(config *Config, file *ConfigFile, outputPath string) error {
	templatesDir := filepath.Join(config.ConfigDir, "templates")
	
	// Try different template extensions and base names
	templatePaths := []string{}
	baseName := strings.TrimPrefix(file.Name, ".")
	
	// Get template extensions from config
	exts := config.TemplateExts
	if len(exts) == 0 {
		exts = []string{".tmpl", ".template", ".tpl"}
	}
	
	// Try various naming patterns
	for _, ext := range exts {
		templatePaths = append(templatePaths, 
			filepath.Join(templatesDir, baseName+ext),
			filepath.Join(templatesDir, file.Name+ext),
			filepath.Join(templatesDir, file.Category+"_"+baseName+ext),
		)
	}
	
	var templatePath string
	for _, path := range templatePaths {
		if _, err := os.Stat(path); err == nil {
			templatePath = path
			break
		}
	}
	
	// If no template found, create a basic config file
	if templatePath == "" {
		basicContent := "# " + file.Name + " configuration\n# Generated by config-manager\n"
		return os.WriteFile(outputPath, []byte(basicContent), 0644)
	}
	
	// Load and execute template
	tmpl, err := template.ParseFiles(templatePath)
	if err != nil {
		return err
	}
	
	// Merge variables: global < file-specific
	vars := make(map[string]string)
	
	// Add some default system variables
	if user := os.Getenv("USER"); user != "" {
		vars["user"] = user
	}
	if hostname, _ := os.Hostname(); hostname != "" {
		vars["hostname"] = hostname
	}
	
	// Add editor and shell from config
	vars["editor"] = config.Editor
	vars["shell"] = config.Shell
	
	// Load global config variables
	for k, v := range config.Variables {
		vars[k] = v
	}
	
	// File-specific variables override all
	for k, v := range file.Variables {
		vars[k] = v
	}
	
	// Execute template
	output, err := os.Create(outputPath)
	if err != nil {
		return err
	}
	defer output.Close()
	
	return tmpl.Execute(output, vars)
}
